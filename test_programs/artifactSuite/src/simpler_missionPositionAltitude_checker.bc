; ModuleID = 'simpler_missionPositionAltitude_checker.cpp'
source_filename = "simpler_missionPositionAltitude_checker.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

%struct.mission_s = type { [20 x %struct.mission_item_s], i32 }
%struct.mission_item_s = type { double, double, float, i32, i8 }

@.str = private unnamed_addr constant [18 x i8] c"from function %p\0A\00", align 1

; Function Attrs: noinline optnone ssp uwtable
define zeroext i1 @_Z25checkHomePositionAltitudeRK9mission_sRfb(%struct.mission_s* dereferenceable(648) %mission, float* dereferenceable(4) %home_alt, i1 zeroext %home_alt_valid) #0 {
entry:
  %retval = alloca i1, align 1
  %mission.addr = alloca %struct.mission_s*, align 8
  %home_alt.addr = alloca float*, align 8
  %home_alt_valid.addr = alloca i8, align 1
  %i = alloca i64, align 8
  %wp_alt = alloca float, align 4
  store %struct.mission_s* %mission, %struct.mission_s** %mission.addr, align 8
  store float* %home_alt, float** %home_alt.addr, align 8
  %frombool = zext i1 %home_alt_valid to i8
  store i8 %frombool, i8* %home_alt_valid.addr, align 1
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %count = getelementptr inbounds %struct.mission_s, %struct.mission_s* %1, i32 0, i32 1
  %2 = load i32, i32* %count, align 8
  %conv = sext i32 %2 to i64
  %cmp = icmp ult i64 %0, %conv
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items = getelementptr inbounds %struct.mission_s, %struct.mission_s* %3, i32 0, i32 0
  %4 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items, i64 0, i64 %4
  %altitude = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx, i32 0, i32 2
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), float* %altitude)
  %5 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items1 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %5, i32 0, i32 0
  %6 = load i64, i64* %i, align 8
  %arrayidx2 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items1, i64 0, i64 %6
  %altitude_is_relative = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx2, i32 0, i32 4
  %7 = load i8, i8* %altitude_is_relative, align 8
  %tobool = trunc i8 %7 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %8 = load i8, i8* %home_alt_valid.addr, align 1
  %tobool3 = trunc i8 %8 to i1
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  %9 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items4 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %9, i32 0, i32 0
  %10 = load i64, i64* %i, align 8
  %arrayidx5 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items4, i64 0, i64 %10
  %altitude_is_relative6 = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx5, i32 0, i32 4
  %11 = load i8, i8* %altitude_is_relative6, align 8
  %tobool7 = trunc i8 %11 to i1
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %12 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items8 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %12, i32 0, i32 0
  %13 = load i64, i64* %i, align 8
  %arrayidx9 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items8, i64 0, i64 %13
  %altitude10 = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx9, i32 0, i32 2
  %14 = load float, float* %altitude10, align 8
  %15 = load float*, float** %home_alt.addr, align 8
  %16 = load float, float* %15, align 4
  %add = fadd float %14, %16
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %17 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items11 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %17, i32 0, i32 0
  %18 = load i64, i64* %i, align 8
  %arrayidx12 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items11, i64 0, i64 %18
  %altitude13 = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx12, i32 0, i32 2
  %19 = load float, float* %altitude13, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %add, %cond.true ], [ %19, %cond.false ]
  store float %cond, float* %wp_alt, align 4
  %20 = load float*, float** %home_alt.addr, align 8
  %21 = load float, float* %20, align 4
  %22 = load float, float* %wp_alt, align 4
  %cmp14 = fcmp ogt float %21, %22
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %cond.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end16:                                         ; preds = %cond.end
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %23 = load i64, i64* %i, align 8
  %inc = add i64 %23, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end, %if.then15, %if.then
  %24 = load i1, i1* %retval, align 1
  ret i1 %24
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 10, i32 14]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"Apple LLVM version 10.0.1 (clang-1001.0.46.4)"}
