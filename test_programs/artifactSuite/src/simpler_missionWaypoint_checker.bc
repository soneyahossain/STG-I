; ModuleID = 'simpler_missionWaypoint_checker.cpp'
source_filename = "simpler_missionWaypoint_checker.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

%struct.mission_s = type { [20 x %struct.mission_item_s], i32 }
%struct.mission_item_s = type { double, double, float, i32, i8 }

; Function Attrs: noinline nounwind optnone ssp uwtable
define float @_Z29get_distance_to_next_waypointdddd(double %lat_now, double %lon_now, double %lat_next, double %lon_next) #0 {
entry:
  %lat_now.addr = alloca double, align 8
  %lon_now.addr = alloca double, align 8
  %lat_next.addr = alloca double, align 8
  %lon_next.addr = alloca double, align 8
  %lat_now_rad = alloca double, align 8
  %lat_next_rad = alloca double, align 8
  %d_lat = alloca double, align 8
  %d_lon = alloca double, align 8
  %a = alloca double, align 8
  %c = alloca double, align 8
  store double %lat_now, double* %lat_now.addr, align 8
  store double %lon_now, double* %lon_now.addr, align 8
  store double %lat_next, double* %lat_next.addr, align 8
  store double %lon_next, double* %lon_next.addr, align 8
  %0 = load double, double* %lat_now.addr, align 8
  %mul = fmul double 3.141500e+00, %0
  %div = fdiv double %mul, 1.800000e+02
  store double %div, double* %lat_now_rad, align 8
  %1 = load double, double* %lat_next.addr, align 8
  %mul1 = fmul double 3.141500e+00, %1
  %div2 = fdiv double %mul1, 1.800000e+02
  store double %div2, double* %lat_next_rad, align 8
  %2 = load double, double* %lat_next_rad, align 8
  %3 = load double, double* %lat_now_rad, align 8
  %sub = fsub double %2, %3
  store double %sub, double* %d_lat, align 8
  %4 = load double, double* %lon_next.addr, align 8
  %mul3 = fmul double 3.141500e+00, %4
  %div4 = fdiv double %mul3, 1.800000e+02
  %5 = load double, double* %lon_now.addr, align 8
  %mul5 = fmul double 3.141500e+00, %5
  %div6 = fdiv double %mul5, 1.800000e+02
  %sub7 = fsub double %div4, %div6
  store double %sub7, double* %d_lon, align 8
  %6 = load double, double* %d_lat, align 8
  %div8 = fdiv double %6, 2.000000e+00
  %7 = call double @llvm.sin.f64(double %div8)
  %8 = load double, double* %d_lat, align 8
  %div9 = fdiv double %8, 2.000000e+00
  %9 = call double @llvm.sin.f64(double %div9)
  %mul10 = fmul double %7, %9
  %10 = load double, double* %d_lon, align 8
  %div11 = fdiv double %10, 2.000000e+00
  %11 = call double @llvm.sin.f64(double %div11)
  %12 = load double, double* %d_lon, align 8
  %div12 = fdiv double %12, 2.000000e+00
  %13 = call double @llvm.sin.f64(double %div12)
  %mul13 = fmul double %11, %13
  %14 = load double, double* %lat_now_rad, align 8
  %15 = call double @llvm.cos.f64(double %14)
  %mul14 = fmul double %mul13, %15
  %16 = load double, double* %lat_next_rad, align 8
  %17 = call double @llvm.cos.f64(double %16)
  %mul15 = fmul double %mul14, %17
  %add = fadd double %mul10, %mul15
  store double %add, double* %a, align 8
  %18 = load double, double* %a, align 8
  %19 = call double @llvm.sqrt.f64(double %18)
  %20 = load double, double* %a, align 8
  %sub16 = fsub double 1.000000e+00, %20
  %21 = call double @llvm.sqrt.f64(double %sub16)
  %call = call double @atan2(double %19, double %21) #3
  store double %call, double* %c, align 8
  %22 = load double, double* %c, align 8
  %mul17 = fmul double 1.270000e+04, %22
  %conv = fptrunc double %mul17 to float
  ret float %conv
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sin.f64(double) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #1

; Function Attrs: nounwind readnone
declare double @atan2(double, double) #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i1 @_Z30checkDistancesBetweenWaypointsRK9mission_sf(%struct.mission_s* dereferenceable(648) %mission, float %max_distance) #0 {
entry:
  %retval = alloca i1, align 1
  %mission.addr = alloca %struct.mission_s*, align 8
  %max_distance.addr = alloca float, align 4
  %last_lat = alloca double, align 8
  %last_lon = alloca double, align 8
  %last_alt = alloca float, align 4
  %i = alloca i32, align 4
  %dist_between_waypoints = alloca float, align 4
  store %struct.mission_s* %mission, %struct.mission_s** %mission.addr, align 8
  store float %max_distance, float* %max_distance.addr, align 4
  %0 = load float, float* %max_distance.addr, align 4
  %cmp = fcmp ole float %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  store double 0x7FF8000000000000, double* %last_lat, align 8
  store double 0x7FF8000000000000, double* %last_lon, align 8
  store float 0x7FF8000000000000, float* %last_alt, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %count = getelementptr inbounds %struct.mission_s, %struct.mission_s* %2, i32 0, i32 1
  %3 = load i32, i32* %count, align 8
  %cmp1 = icmp slt i32 %1, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items = getelementptr inbounds %struct.mission_s, %struct.mission_s* %4, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items, i64 0, i64 %idxprom
  %lat = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx, i32 0, i32 0
  %6 = load double, double* %lat, align 8
  %7 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items2 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %7, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %8 to i64
  %arrayidx4 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items2, i64 0, i64 %idxprom3
  %lon = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx4, i32 0, i32 1
  %9 = load double, double* %lon, align 8
  %10 = load double, double* %last_lat, align 8
  %11 = load double, double* %last_lon, align 8
  %call = call float @_Z29get_distance_to_next_waypointdddd(double %6, double %9, double %10, double %11)
  store float %call, float* %dist_between_waypoints, align 4
  %12 = load float, float* %dist_between_waypoints, align 4
  %13 = load float, float* %max_distance.addr, align 4
  %cmp5 = fcmp ogt float %12, %13
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %for.body
  store i1 false, i1* %retval, align 1
  br label %return

if.else:                                          ; preds = %for.body
  %14 = load float, float* %dist_between_waypoints, align 4
  %cmp7 = fcmp olt float %14, 0x3FA99999A0000000
  br i1 %cmp7, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.else
  %15 = load float, float* %last_alt, align 4
  %16 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items8 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %16, i32 0, i32 0
  %17 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %17 to i64
  %arrayidx10 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items8, i64 0, i64 %idxprom9
  %altitude = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx10, i32 0, i32 2
  %18 = load float, float* %altitude, align 8
  %sub = fsub float %15, %18
  %19 = call float @llvm.fabs.f32(float %sub)
  %cmp11 = fcmp olt float %19, 0x3FA99999A0000000
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true
  store i1 false, i1* %retval, align 1
  br label %return

if.end13:                                         ; preds = %land.lhs.true, %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end13
  %20 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items15 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %20, i32 0, i32 0
  %21 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %21 to i64
  %arrayidx17 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items15, i64 0, i64 %idxprom16
  %lat18 = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx17, i32 0, i32 0
  %22 = load double, double* %lat18, align 8
  store double %22, double* %last_lat, align 8
  %23 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items19 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %23, i32 0, i32 0
  %24 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %24 to i64
  %arrayidx21 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items19, i64 0, i64 %idxprom20
  %lon22 = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx21, i32 0, i32 1
  %25 = load double, double* %lon22, align 8
  store double %25, double* %last_lon, align 8
  %26 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items23 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %26, i32 0, i32 0
  %27 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %27 to i64
  %arrayidx25 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items23, i64 0, i64 %idxprom24
  %altitude26 = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx25, i32 0, i32 2
  %28 = load float, float* %altitude26, align 8
  store float %28, float* %last_alt, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %29 = load i32, i32* %i, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end, %if.then12, %if.then6, %if.then
  %30 = load i1, i1* %retval, align 1
  ret i1 %30
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #1

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 10, i32 14]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"Apple LLVM version 10.0.1 (clang-1001.0.46.4)"}
