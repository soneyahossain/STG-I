; ModuleID = 'simpler_missionGeofence_checker.cpp'
source_filename = "simpler_missionGeofence_checker.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

%struct.mission_s = type { [20 x %struct.mission_item_s], i32 }
%struct.mission_item_s = type { double, double, float, i32, i8 }

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i1 @_Z11insideFenceiibiiii(i32 %lat, i32 %lon, i1 zeroext %inclusion, i32 %high_lat, i32 %low_lat, i32 %high_lon, i32 %low_lon) #0 {
entry:
  %lat.addr = alloca i32, align 4
  %lon.addr = alloca i32, align 4
  %inclusion.addr = alloca i8, align 1
  %high_lat.addr = alloca i32, align 4
  %low_lat.addr = alloca i32, align 4
  %high_lon.addr = alloca i32, align 4
  %low_lon.addr = alloca i32, align 4
  %inside = alloca i8, align 1
  store i32 %lat, i32* %lat.addr, align 4
  store i32 %lon, i32* %lon.addr, align 4
  %frombool = zext i1 %inclusion to i8
  store i8 %frombool, i8* %inclusion.addr, align 1
  store i32 %high_lat, i32* %high_lat.addr, align 4
  store i32 %low_lat, i32* %low_lat.addr, align 4
  store i32 %high_lon, i32* %high_lon.addr, align 4
  store i32 %low_lon, i32* %low_lon.addr, align 4
  store i8 0, i8* %inside, align 1
  %0 = load i32, i32* %lon.addr, align 4
  %1 = load i32, i32* %low_lon.addr, align 4
  %cmp = icmp sgt i32 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %lon.addr, align 4
  %3 = load i32, i32* %high_lon.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %if.then, label %if.end6

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* %lat.addr, align 4
  %5 = load i32, i32* %high_lat.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %if.then
  %6 = load i32, i32* %lat.addr, align 4
  %7 = load i32, i32* %low_lat.addr, align 4
  %cmp4 = icmp sgt i32 %6, %7
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true3
  store i8 1, i8* %inside, align 1
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true3, %if.then
  br label %if.end6

if.end6:                                          ; preds = %if.end, %land.lhs.true, %entry
  %8 = load i8, i8* %inclusion.addr, align 1
  %tobool = trunc i8 %8 to i1
  br i1 %tobool, label %if.end11, label %if.then7

if.then7:                                         ; preds = %if.end6
  %9 = load i8, i8* %inside, align 1
  %tobool8 = trunc i8 %9 to i1
  br i1 %tobool8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then7
  store i8 0, i8* %inside, align 1
  br label %if.end10

if.else:                                          ; preds = %if.then7
  store i8 1, i8* %inside, align 1
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then9
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.end6
  %10 = load i8, i8* %inside, align 1
  %tobool12 = trunc i8 %10 to i1
  ret i1 %tobool12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i1 @_Z13checkGeofenceRK9mission_sbiiii(%struct.mission_s* dereferenceable(648) %mission, i1 zeroext %inclusion, i32 %high_lat, i32 %low_lat, i32 %high_lon, i32 %low_lon) #0 {
entry:
  %mission.addr = alloca %struct.mission_s*, align 8
  %inclusion.addr = alloca i8, align 1
  %high_lat.addr = alloca i32, align 4
  %low_lat.addr = alloca i32, align 4
  %high_lon.addr = alloca i32, align 4
  %low_lon.addr = alloca i32, align 4
  %acceptable = alloca i8, align 1
  %i = alloca i32, align 4
  store %struct.mission_s* %mission, %struct.mission_s** %mission.addr, align 8
  %frombool = zext i1 %inclusion to i8
  store i8 %frombool, i8* %inclusion.addr, align 1
  store i32 %high_lat, i32* %high_lat.addr, align 4
  store i32 %low_lat, i32* %low_lat.addr, align 4
  store i32 %high_lon, i32* %high_lon.addr, align 4
  store i32 %low_lon, i32* %low_lon.addr, align 4
  store i8 1, i8* %acceptable, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %count = getelementptr inbounds %struct.mission_s, %struct.mission_s* %1, i32 0, i32 1
  %2 = load i32, i32* %count, align 8
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items = getelementptr inbounds %struct.mission_s, %struct.mission_s* %3, i32 0, i32 0
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items, i64 0, i64 %idxprom
  %altitude = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx, i32 0, i32 2
  %5 = load float, float* %altitude, align 8
  %cmp1 = fcmp ogt float %5, 4.000000e+02
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i8 0, i8* %acceptable, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %6 = load i8, i8* %acceptable, align 1
  %tobool = trunc i8 %6 to i1
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %7 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items2 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %7, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %8 to i64
  %arrayidx4 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items2, i64 0, i64 %idxprom3
  %lat = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx4, i32 0, i32 0
  %9 = load double, double* %lat, align 8
  %conv = fptosi double %9 to i32
  %10 = load %struct.mission_s*, %struct.mission_s** %mission.addr, align 8
  %items5 = getelementptr inbounds %struct.mission_s, %struct.mission_s* %10, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %11 to i64
  %arrayidx7 = getelementptr inbounds [20 x %struct.mission_item_s], [20 x %struct.mission_item_s]* %items5, i64 0, i64 %idxprom6
  %lon = getelementptr inbounds %struct.mission_item_s, %struct.mission_item_s* %arrayidx7, i32 0, i32 1
  %12 = load double, double* %lon, align 8
  %conv8 = fptosi double %12 to i32
  %13 = load i8, i8* %inclusion.addr, align 1
  %tobool9 = trunc i8 %13 to i1
  %14 = load i32, i32* %high_lat.addr, align 4
  %15 = load i32, i32* %low_lat.addr, align 4
  %16 = load i32, i32* %high_lon.addr, align 4
  %17 = load i32, i32* %low_lon.addr, align 4
  %call = call zeroext i1 @_Z11insideFenceiibiiii(i32 %conv, i32 %conv8, i1 zeroext %tobool9, i32 %14, i32 %15, i32 %16, i32 %17)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %18 = phi i1 [ false, %if.end ], [ %call, %land.rhs ]
  %frombool10 = zext i1 %18 to i8
  store i8 %frombool10, i8* %acceptable, align 1
  br label %for.inc

for.inc:                                          ; preds = %land.end
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8, i8* %acceptable, align 1
  %tobool11 = trunc i8 %20 to i1
  ret i1 %tobool11
}

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 10, i32 14]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"Apple LLVM version 10.0.1 (clang-1001.0.46.4)"}
